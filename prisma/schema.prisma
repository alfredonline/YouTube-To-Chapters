generator client {
    provider = "prisma-client-js"
  }
  
// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  directUrl = env("DATABASE_URL_UNPOOLED")
}
  
  model ChapterSet { 
    id      String   @id @default(cuid())
    title   String
    content String[]
    createdAt DateTime @default(now())
    users     User @relation("UserSavedChapters", fields: [userId], references: [id])
    userId    String
  }
  
  model User {
    id                 String          @id @default(cuid())
    name               String?
    email              String          @unique
    emailVerified      DateTime?
    image              String?
    accounts           Account[]
  sessions           Session[]
    authenticators     Authenticator[]
    createdAt          DateTime        @default(now())
    updatedAt          DateTime        @updatedAt
    savedChapters      ChapterSet[] @relation("UserSavedChapters")
    stripe_customer_id String?
  }
  
  model Account {
    id                String   @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
    @@unique([provider, providerAccountId])
  }
  
  model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
  }
  
  model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime
  
    @@unique([identifier, token])
  }
  
  model Authenticator {
    id                   String  @id @default(cuid())
    credentialID         String  @unique
    userId               String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?
    user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
    @@unique([userId, credentialID])
  }